basePath: /api/v1
definitions:
  models.Credential:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: integer
      platform:
        type: string
      updated_at:
        type: string
    type: object
  models.DecryptResponse:
    properties:
      decrypted_password:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.HTTPError:
    properties:
      message:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  validations.CredentialRequest:
    properties:
      description:
        maxLength: 100
        minLength: 2
        type: string
      email:
        maxLength: 100
        type: string
      master_key:
        maxLength: 30
        minLength: 8
        type: string
      platform:
        maxLength: 100
        minLength: 2
        type: string
      secret:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - description
    - email
    - master_key
    - platform
    - secret
    type: object
host: localhost:3000
info:
  contact:
    email: cesarsebastian.dev@email.com
    name: Eng. Cesar Sebastian
    url: https://github.com/cesarsebastiandev
  description: RESTful API for managing passwords securely in Backend Self Pass Manager
    project.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Backend Self Pass Manager API
  version: "1"
paths:
  /credentials:
    get:
      description: Return list of all credentials from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Credential'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Return list of all credentials
      tags:
      - credentials
    post:
      consumes:
      - application/json
      description: Adds a new credential with encrypted secret and hashed master key
      parameters:
      - description: Credential input
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/validations.CredentialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Record created successfully
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid input or Failed to create record
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to encrypt secret or Failed to hash master key
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add new credential
      tags:
      - Credentials
  /credentials/{id}:
    delete:
      description: Deletes the credential record identified by its ID
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a credential by ID
      tags:
      - Credentials
    get:
      description: Retrieves a single credential record by its ID
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Credential'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a credential by ID
      tags:
      - Credentials
    patch:
      consumes:
      - application/json
      description: Update fields of an existing credential; only provided fields will
        be updated
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: credential
        schema:
          $ref: '#/definitions/validations.CredentialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Record updated successfully
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to encrypt password or Failed to update record
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a credential by ID
      tags:
      - Credentials
  /credentials/decrypt/{id}:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DecryptResponse'
        "400":
          description: Masterkey is required to decrypt
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid decryption password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to decrypt password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
securityDefinitions:
  bearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
